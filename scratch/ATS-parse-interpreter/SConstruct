#
# Author: Zhiqiang Ren
# Date: 04/07/2015
#

######

import os

######

OS_PATH = os.environ['PATH']
PATSHOME= os.environ['PATSHOME']
PATSHOMERELOC= os.environ['PATSHOMERELOC']

######

PATSHOMEbin= PATSHOME + "/bin"

######

PATSCC=PATSHOMEbin + "/patscc"
PATSOPT=PATSHOMEbin + "/patsopt"
PATSLIB=PATSHOME + "/ccomp/atslib/lib"

PATSHOMERELOC_CONTRIB = PATSHOMERELOC + "/contrib"
######
#
myenv = Environment()
#
myenv['ENV']['PATH'] = \
  OS_PATH + os.pathsep + PATSHOMEbin
#
myenv['ENV']['PATSHOME'] = PATSHOME
myenv['ENV']['PATSHOMERELOC'] = PATSHOMERELOC
myenv['ENV']['PATSHOMERELOC_CONTRIB'] = PATSHOMERELOC_CONTRIB
#
myenv['ENV']['PATSCC'] = PATSCC
myenv['ENV']['PATSOPT'] = PATSOPT
myenv['ENV']['PATSLIB'] = PATSLIB

# set up construction variables
myenv.Append(LIBS = ["atslib", "m"],
             LIBPATH = [PATSLIB])
#
######
#
#
######
#
INCLUDE_ATS = "-IATS " + PATSHOMERELOC + "/contrib"

INCLUDE = [PATSHOME, 
           PATSHOME + "/ccomp/runtime", 
           PATSHOMERELOC_CONTRIB]

CFLAGS = ["-D_GNU_SOURCE", 
          "-O2"]

MALLOCFLAG = "-DATS_MEMALLOC_LIBC"

#
#

# todo: Where do TARGET and SOURCE come from?
builder_dats2c = Builder(
                   action = "{PATSCC} {INCLUDE_ATS} -o $TARGET -ccats $SOURCE".format(
                               PATSCC = myenv["ENV"]["PATSCC"],
                               INCLUDE_ATS = INCLUDE_ATS
                               ),
                   suffix = "_dats.c",
                   src_suffix = ".dats"
                 )
myenv['BUILDERS']['DATS2C'] = builder_dats2c

# ########## ########## 

builder_sats2c = Builder(
                   action = "{PATSCC} {INCLUDE_ATS} -o $TARGET -ccats $SOURCE".format(
                               PATSCC = myenv["ENV"]["PATSCC"],
                               INCLUDE_ATS = INCLUDE_ATS
                               ),
                   suffix = "_sats.c",
                   src_suffix = ".sats"
                 )
myenv['BUILDERS']['SATS2C'] = builder_sats2c

def compile_atsfiles(files):
    objects = []

    #  ##########
    
    if 'CPPPATH' in myenv:
        cpppath = myenv['CPPPATH'] + INCLUDE,
    else:
        cpppath = INCLUDE,

    #  ##########

    for file in files:
        [fname, fext] = os.path.splitext(file)
        if fext == ".sats":
            # I can only specify one argument since I've specified
            # the src_suffix when creating the Builder.
            cfiles = myenv.SATS2C(fname)
            objfiles = myenv.Object(target = fname + "_sats.o",
                                       source = cfiles,
                                       CPPPATH = cpppath,
                                       CCFLAGS = myenv['CCFLAGS'] + CFLAGS)
            objects += objfiles
        elif fext == ".dats":
            cfiles = myenv.DATS2C(fname)
            objfiles = myenv.Object(fname + "_dats.o", 
                                       cfiles,
                                       CPPPATH = cpppath,
                                       CCFLAGS = myenv['CCFLAGS'] + CFLAGS + [MALLOCFLAG])
            objects += objfiles
        else:
            raise RuntimeError(fext + " is not supported.")

    return objects

def build(target, objects):
    myenv.Program(target = target, source = objects)
   
        
# ######### ############
#
# demo code (not in use now)
# def generate_actions \
# (source, target, env, for_signature): \
# return '%s -o %s %s -L%s -latslib' % \
#   (env['ENV']['PATSCC'], target[0], source[0], env['ENV']['PATSLIB'])
# 
# ######
# #
# patsccBuilder = \
# Builder(
#   generator = generate_actions, src_suffix = '.dats'
# ) # end of [Builder]
# #
# myenv['BUILDERS']['Patscc'] = patsccBuilder
#
######

# ############### ################ #
# Project specific content
#
SOURCES_SATS = ["atsparemit.sats", 
                "atsparemit_syntax.sats", 
                "atsparemit_parsing.sats", 
                "atsparemit_emit.sats"
               ]


SOURCES_DATS = ["atsparemit_mylib.dats",
                "atsparemit_error.dats", 
                "atsparemit_print.dats", 
                "atsparemit_symbol.dats", 
                "atsparemit_fname.dats", 
                "atsparemit_posloc.dats", 
                "atsparemit_global.dats", 
                "atsparemit_syntax.dats", 
                "atsparemit_lexerr.dats", 
                "atsparemit_lexbuf.dats", 
                "atsparemit_lexing.dats", 
                "atsparemit_tokbuf.dats", 
                "atsparemit_parerr.dats", 
                "atsparemit_parsing.dats", 
                "atsparemit_parsing_d0exp.dats", 
                "atsparemit_parsing_d0ecl.dats", 
                "atsparemit_parsing_instr.dats", 
                "atsparemit_emit.dats", 
                "atsparemit_typedef.dats", 
                "atsparemit_emit_js.dats",
                "atsparemit_emit2_js.dats",
                "atsparemit_main_js.dats"
]

objects = compile_atsfiles(SOURCES_DATS + SOURCES_SATS)
ret = build("atscc2js", objects)


######

###### end of [SConstruct] ######

